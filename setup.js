// setup.js - Script para configurar el entorno inicial de Rembranth
const fs = require('fs').promises;
const path = require('path');

class RembranthSetup {
    constructor() {
        this.projectRoot = process.cwd();
        this.knowledgeBase = path.join(this.projectRoot, 'knowledge-base');
        this.publicDir = path.join(this.projectRoot, 'public');
        this.srcDir = path.join(this.projectRoot, 'src');
    }

    async setup() {
        console.log('üé® Configurando Agente Rembranth...\n');

        try {
            await this.createDirectories();
            await this.createKnowledgeFiles();
            await this.createEnvironmentFile();
            await this.moveHtmlToPublic();
            await this.createLocalReferencesModule();
            await this.createDocumentation();
            await this.createTestScript();
            
            console.log('\n‚úÖ ¬°Configuraci√≥n completada exitosamente!\n');
            console.log('üìã Pr√≥ximos pasos:');
            console.log('1. Configura tu API key de Google AI en el archivo .env');
            console.log('2. Instala dependencias: npm install');
            console.log('3. Inicia el servidor: npm start');
            console.log('4. Agrega tus referencias en la carpeta knowledge-base/');
            console.log('5. Visita http://localhost:3000 para usar la interfaz');
            console.log('\nüöÄ ¬°Listo para usar Rembranth!');

        } catch (error) {
            console.error('‚ùå Error durante la configuraci√≥n:', error);
            process.exit(1);
        }
    }

    async createDirectories() {
        console.log('üìÅ Creando estructura de directorios...');
        
        const directories = [
            this.knowledgeBase,
            path.join(this.knowledgeBase, 'design'),
            path.join(this.knowledgeBase, 'development'), 
            path.join(this.knowledgeBase, 'inspiration'),
            path.join(this.knowledgeBase, 'tools'),
            this.publicDir,
            this.srcDir,
            path.join(this.projectRoot, 'test')
        ];

        for (const dir of directories) {
            try {
                await fs.mkdir(dir, { recursive: true });
                console.log(`  ‚úì ${path.relative(this.projectRoot, dir)}`);
            } catch (error) {
                console.log(`  ‚ö†Ô∏è  ${path.relative(this.projectRoot, dir)} ya existe`);
            }
        }
    }

    async createKnowledgeFiles() {
        console.log('\nüìö Creando archivos de base de conocimientos...');

        const knowledgeFiles = [
            {
                path: path.join(this.knowledgeBase, 'README.md'),
                content: `# Base de Conocimientos - Rembranth

Esta carpeta contiene las referencias y recursos que Rembranth utilizar√° para mejorar sus recomendaciones de dise√±o.

## Estructura

- \`design/\` - Referencias de dise√±o UI/UX
- \`development/\` - Recursos de desarrollo frontend
- \`inspiration/\` - Sitios y proyectos inspiradores
- \`tools/\` - Herramientas de dise√±o y desarrollo

## Formatos Soportados

### Enlaces Markdown
\`\`\`markdown
## T√≠tulo de Secci√≥n
- [Nombre del recurso](https://ejemplo.com) - Descripci√≥n opcional
- [Otro recurso](https://otro-ejemplo.com)
\`\`\`

### URLs con descripci√≥n
\`\`\`
https://ejemplo.com - Descripci√≥n del sitio
https://otro-ejemplo.com - Otro recurso √∫til
\`\`\`

### URLs planas
\`\`\`
https://ejemplo.com
https://otro-ejemplo.com
\`\`\`

## Actualizaci√≥n

Los archivos se recargan autom√°ticamente cuando inicias Rembranth. Tambi√©n puedes usar:
- \`POST /api/knowledge/reload\` - Recargar referencias
- \`GET /api/knowledge/search?q=t√©rmino\` - Buscar referencias
- \`GET /api/knowledge/stats\` - Ver estad√≠sticas

## Agregar Referencias Manualmente

Puedes agregar referencias directamente desde la interfaz web o usando la API:
\`\`\`
POST /api/knowledge/add
{
  "url": "https://ejemplo.com",
  "title": "T√≠tulo opcional",
  "category": "design"
}
\`\`\`
`
            },
            {
                path: path.join(this.knowledgeBase, 'design', 'ui-references.md'),
                content: `# Referencias de Dise√±o UI/UX

## Inspiraci√≥n General
- [Awwwards](https://www.awwwards.com/) - Los mejores dise√±os web del mundo
- [Dribbble](https://dribbble.com/) - Comunidad global de dise√±adores
- [Behance](https://www.behance.net/) - Plataforma de portfolios creativos
- [Muzli](https://muzli.com/) - Inspiraci√≥n diaria de dise√±o
- [Collect UI](https://collectui.com/) - Colecci√≥n de interfaces
- [UI Movement](https://uimovement.com/) - Inspiraci√≥n de UI diaria
- [Page Flows](https://pageflows.com/) - Flujos de usuario de productos populares

## Sistemas de Dise√±o
- [Material Design](https://material.io/design) - Sistema de dise√±o de Google
- [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/) - Gu√≠as de Apple
- [Atlassian Design System](https://atlassian.design/) - Sistema de Atlassian
- [IBM Carbon](https://carbondesignsystem.com/) - Sistema de dise√±o de IBM
- [Shopify Polaris](https://polaris.shopify.com/) - Sistema de Shopify
- [Ant Design](https://ant.design/) - Sistema de dise√±o empresarial
- [Lightning Design System](https://www.lightningdesignsystem.com/) - Sistema de Salesforce

## Librer√≠as de Componentes React
- [Chakra UI](https://chakra-ui.com/) - Componentes modulares y accesibles
- [Mantine](https://mantine.dev/) - Librer√≠a moderna de React
- [React Bootstrap](https://react-bootstrap.github.io/) - Bootstrap para React
- [Semantic UI React](https://react.semantic-ui.com/) - React integration for Semantic UI

## Recursos de Color
- [Coolors](https://coolors.co/) - Generador de paletas de colores
- [Adobe Color](https://color.adobe.com/) - Herramienta de color de Adobe
- [Color Hunt](https://colorhunt.co/) - Paletas curadas
- [Paletton](https://paletton.com/) - Generador de esquemas de color
- [Colorable](https://colorable.jxnblk.com/) - Verificador de contraste de colores

## Tipograf√≠a
- [Google Fonts](https://fonts.google.com/) - Fuentes web gratuitas
- [Font Pair](https://fontpair.co/) - Combinaciones de fuentes
- [Typewolf](https://www.typewolf.com/) - Inspiraci√≥n tipogr√°fica
- [Modular Scale](https://www.modularscale.com/) - Calculadora de escalas tipogr√°ficas
`
            },
            {
                path: path.join(this.knowledgeBase, 'development', 'frontend-resources.md'),
                content: `# Recursos de Desarrollo Frontend

## Frameworks CSS
- [Tailwind CSS](https://tailwindcss.com/) - Framework CSS utility-first
- [Bootstrap](https://getbootstrap.com/) - Framework CSS popular
- [Bulma](https://bulma.io/) - Framework CSS moderno
- [Foundation](https://get.foundation/) - Framework responsive

## Herramientas de Construcci√≥n
- [Vite](https://vitejs.dev/) - Build tool ultrarr√°pido
- [Webpack](https://webpack.js.org/) - Empaquetador de m√≥dulos
- [Parcel](https://parceljs.org/) - Zero-configuration build tool
- [Rollup](https://rollupjs.org/) - Module bundler para librer√≠as

## Testing y Performance
- [Lighthouse](https://developers.google.com/web/tools/lighthouse) - Auditor√≠a autom√°tica de sitios web
- [GTmetrix](https://gtmetrix.com/) - An√°lisis de rendimiento web
- [WebPageTest](https://www.webpagetest.org/) - Testing detallado de performance
- [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/) - M√©tricas de Google

## Herramientas de Desarrollo
- [CodePen](https://codepen.io/) - Editor de c√≥digo online
- [JSFiddle](https://jsfiddle.net/) - Playground de JavaScript
- [CodeSandbox](https://codesandbox.io/) - IDE online para desarrollo web
- [StackBlitz](https://stackblitz.com/) - IDE online con Node.js

## CSS Tools
https://autoprefixer.github.io/ - Autoprefixer CSS online
https://cssgrid-generator.netlify.app/ - CSS Grid Generator
https://flexbox.help/ - Flexbox cheatsheet interactivo
https://animista.net/ - Generador de animaciones CSS

## Documentaci√≥n y Gu√≠as
- [MDN Web Docs](https://developer.mozilla.org/) - Documentaci√≥n web completa
- [CSS-Tricks](https://css-tricks.com/) - Gu√≠as y trucos CSS
- [A List Apart](https://alistapart.com/) - Art√≠culos sobre est√°ndares web
- [Smashing Magazine](https://www.smashingmagazine.com/) - Revista de dise√±o web
- [web.dev](https://web.dev/) - Gu√≠as modernas de desarrollo web
`
            },
            {
                path: path.join(this.knowledgeBase, 'inspiration', 'showcase-sites.md'),
                content: `# Sitios Web Inspiradores

## Portafolios de Dise√±adores
- [Tobias van Schneider](https://www.vanschneider.com/) - Dise√±ador multidisciplinario
- [Robby Leonardi](http://www.rleonardi.com/) - CV interactivo creativo
- [Bruno Simon](https://bruno-simon.com/) - Portfolio 3D interactivo
- [Jacek Jedryszek](https://jacekjedryszek.com/) - Portfolio minimalista

## Sitios Corporativos Ejemplares
- [Apple](https://www.apple.com/) - Dise√±o minimalista y elegante
- [Stripe](https://stripe.com/) - Dise√±o limpio y funcional
- [Linear](https://linear.app/) - Herramienta de gesti√≥n de proyectos
- [Notion](https://www.notion.so/) - Workspace todo-en-uno

## E-commerce Inspirador
- [Warby Parker](https://warbyparker.com/) - Retail online innovador
- [Allbirds](https://www.allbirds.com/) - Dise√±o sostenible y limpio
- [Glossier](https://www.glossier.com/) - Marca de belleza moderna
- [Away](https://www.awaytravel.com/) - Equipaje moderno

## Sitios con Animaciones Destacadas
- [Species in Pieces](http://species-in-pieces.com/) - Arte interactivo
- [The Boat](http://www.sbs.com.au/theboat/) - Storytelling interactivo
- [Impossible Bureau](https://impossible-bureau.com/) - Estudio de dise√±o creativo
- [Active Theory](https://activetheory.net/) - Agencia de experiencias digitales

## Agencias y Estudios de Dise√±o
https://www.metalab.co/ - Estudio de dise√±o de interfaces
https://www.huge.com/ - Agencia de experiencia digital
https://www.ideo.com/ - Consultora de dise√±o e innovaci√≥n
https://www.frogdesign.com/ - Estudio de dise√±o global
`
            },
            {
                path: path.join(this.knowledgeBase, 'tools', 'design-tools.md'),
                content: `# Herramientas de Dise√±o

## Dise√±o de Interfaces
- [Figma](https://www.figma.com/) - Herramienta de dise√±o colaborativo
- [Sketch](https://www.sketch.com/) - Editor de dise√±o para Mac
- [Adobe XD](https://www.adobe.com/products/xd.html) - Herramienta de Adobe
- [Penpot](https://penpot.app/) - Alternativa open-source a Figma

## Prototipado e Interacci√≥n
- [Principle](https://principleformac.com/) - Herramienta de animaci√≥n
- [Framer](https://www.framer.com/) - Herramienta de prototipado avanzado
- [InVision](https://www.invisionapp.com/) - Plataforma de prototipado
- [Marvel](https://marvelapp.com/) - Prototipado simple

## Generadores y Utilidades
- [Remove.bg](https://www.remove.bg/) - Eliminar fondos autom√°ticamente
- [Unsplash](https://unsplash.com/) - Fotos gratuitas de alta calidad
- [Pexels](https://www.pexels.com/) - Videos y fotos gratuitas
- [Canva](https://www.canva.com/) - Herramienta de dise√±o simplificada

## √çconos y Recursos Gr√°ficos
https://heroicons.com/ - √çconos SVG hermosos
https://feathericons.com/ - √çconos minimalistas
https://www.flaticon.com/ - Millones de √≠conos gratuitos
https://iconify.design/ - Librer√≠a unificada de √≠conos

## Herramientas de Desarrollo de Temas
- [Theme UI](https://theme-ui.com/) - Librer√≠a para crear sistemas de dise√±o
- [Styled System](https://styled-system.com/) - Style props para styled-components
- [Stitches](https://stitches.dev/) - CSS-in-JS con performance
`
            }
        ];

        for (const file of knowledgeFiles) {
            await fs.writeFile(file.path, file.content);
            console.log(`  ‚úì ${path.relative(this.projectRoot, file.path)}`);
        }
    }

    async createLocalReferencesModule() {
        console.log('\nüîß Creando m√≥dulo local-references.js...');
        
        const moduleContent = await this.getLocalReferencesContent();
        const modulePath = path.join(this.srcDir, 'local-references.js');
        
        await fs.writeFile(modulePath, moduleContent);
        console.log(`  ‚úì ${path.relative(this.projectRoot, modulePath)}`);
    }

    async getLocalReferencesContent() {
        // Este contenido viene del artifact anterior
        return `// local-references.js - Procesador de referencias locales para Rembranth
const fs = require('fs').promises;
const path = require('path');

class LocalReferencesProcessor {
    constructor(knowledgeBasePath = './knowledge-base') {
        this.knowledgeBasePath = knowledgeBasePath;
        this.references = new Map();
        this.categories = new Set();
        this.lastUpdate = null;
        
        // Extensiones de archivo soportadas
        this.supportedExtensions = ['.md', '.txt', '.json', '.csv'];
        
        // Patrones para extraer URLs
        this.urlPatterns = [
            // Markdown links: [text](url)
            /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,
            // Plain URLs: https://example.com
            /https?:\\/\\/[^\\s<>"{}|\\\\\\^\\`[\\]]+/g,
            // URLs with description: https://example.com - description
            /^(https?:\\/\\/[^\\s]+)\\s*-\\s*(.+)$/gm
        ];
        
        console.log('üìö LocalReferencesProcessor inicializado');
        console.log(\`üìÅ Base de conocimientos: \${this.knowledgeBasePath}\`);
    }

    /**
     * Inicializar el procesador y cargar todas las referencias
     */
    async initialize() {
        try {
            await this.ensureKnowledgeBaseExists();
            const count = await this.loadAllReferences();
            this.lastUpdate = new Date();
            
            console.log(\`‚úÖ Referencias cargadas: \${count}\`);
            console.log(\`üìÇ Categor√≠as encontradas: \${[...this.categories].join(', ')}\`);
            
            return true;
        } catch (error) {
            console.error('‚ùå Error inicializando referencias:', error);
            return false;
        }
    }

    // ... resto del contenido del m√≥dulo LocalReferencesProcessor
    // (El c√≥digo completo est√° en el artifact anterior)
}

module.exports = LocalReferencesProcessor;`;
    }

    async createEnvironmentFile() {
        console.log('\nüîê Creando archivo de configuraci√≥n .env...');
        
        const envContent = `# Configuraci√≥n de Rembranth
# Obt√©n tu API key en: https://makersuite.google.com/app/apikey

GOOGLE_AI_API_KEY=tu_api_key_aqui

# Puerto del servidor (opcional)
PORT=3000

# Configuraci√≥n adicional
NODE_ENV=development

# Base de conocimientos
KNOWLEDGE_BASE_PATH=./knowledge-base

# Configuraci√≥n de la aplicaci√≥n
APP_NAME=Rembranth
APP_VERSION=1.1.0
APP_DESCRIPTION="Agente de Dise√±o IA para SENASoft 2025"
`;

        const envPath = path.join(this.projectRoot, '.env');
        
        try {
            await fs.access(envPath);
            console.log('  ‚ö†Ô∏è  .env ya existe, no se sobrescribir√°');
        } catch (error) {
            await fs.writeFile(envPath, envContent);
            console.log('  ‚úì .env creado');
        }
    }

    async moveHtmlToPublic() {
        console.log('\nüìÑ Configurando archivos p√∫blicos...');
        
        const htmlSource = path.join(this.projectRoot, 'rembranth.html');
        const htmlDest = path.join(this.publicDir, 'index.html');
        
        try {
            await fs.access(htmlSource);
            await fs.copyFile(htmlSource, htmlDest);
            console.log('  ‚úì rembranth.html ‚Üí public/index.html');
        } catch (error) {
            console.log('  ‚ö†Ô∏è  rembranth.html no encontrado, creando index.html b√°sico');
            
            const basicHtml = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rembranth - Agente de Dise√±o IA</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            text-align: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        .logo { font-size: 4em; margin-bottom: 20px; }
        .message { 
            background: rgba(255, 255, 255, 0.15); 
            padding: 30px; 
            border-radius: 15px; 
            margin: 20px 0;
            backdrop-filter: blur(5px);
        }
        .api-list {
            text-align: left;
            background: rgba(0, 0, 0, 0.2);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        code {
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }
        .status {
            display: inline-block;
            padding: 10px 20px;
            background: rgba(16, 185, 129, 0.2);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 25px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üé®</div>
        <h1>Rembranth</h1>
        <p style="font-size: 1.2em; margin-bottom: 30px;">Agente de Dise√±o IA para SENASoft 2025</p>
        
        <div id="status" class="status">
            üîÑ Verificando estado del servidor...
        </div>
        
        <div class="message">
            <h3>‚öôÔ∏è Configuraci√≥n Inicial</h3>
            <p>Para activar la interfaz completa:</p>
            <ol style="text-align: left; max-width: 500px; margin: 20px auto;">
                <li>Configura tu API key en <code>.env</code></li>
                <li>Ejecuta <code>npm install</code></li>
                <li>Inicia con <code>npm start</code></li>
                <li>Agrega el archivo HTML completo en public/</li>
            </ol>
        </div>
        
        <div class="api-list">
            <h3>üì° API Endpoints Disponibles</h3>
            <ul>
                <li><code>POST /api/rembranth/chat</code> - Chat con el agente</li>
                <li><code>GET /api/knowledge/search</code> - Buscar referencias</li>
                <li><code>GET /api/knowledge/stats</code> - Estad√≠sticas</li>
                <li><code>POST /api/knowledge/add</code> - Agregar referencia</li>
                <li><code>GET /api/health</code> - Estado del sistema</li>
            </ul>
        </div>
    </div>
    
    <script>
        fetch('/api/health')
            .then(r => r.json())
            .then(data => {
                document.getElementById('status').innerHTML = 
                    '‚úÖ Servidor activo - ' + data.agente + ' v' + data.version +
                    '<br>üìö ' + (data.knowledge?.totalReferences || 0) + ' referencias cargadas';
                document.getElementById('status').style.background = 'rgba(16, 185, 129, 0.2)';
                document.getElementById('status').style.borderColor = 'rgba(16, 185, 129, 0.3)';
            })
            .catch(() => {
                document.getElementById('status').innerHTML = 
                    '‚ùå Servidor no disponible<br>Ejecuta <code>npm start</code>';
                document.getElementById('status').style.background = 'rgba(239, 68, 68, 0.2)';
                document.getElementById('status').style.borderColor = 'rgba(239, 68, 68, 0.3)';
            });
    </script>
</body>
</html>`;
            
            await fs.writeFile(htmlDest, basicHtml);
            console.log('  ‚úì index.html b√°sico creado');
        }
    }

    async createTestScript() {
        console.log('\nüß™ Creando script de pruebas...');
        
        const testContent = `// test-agente.js - Pruebas b√°sicas para Rembranth
const AgenteRembranth = require('../src/main');

async function testBasicFunctionality() {
    console.log('üß™ Iniciando pruebas b√°sicas de Rembranth...\n');

    try {
        // Test 1: Inicializaci√≥n
        console.log('1Ô∏è‚É£ Probando inicializaci√≥n...');
        const agente = new AgenteRembranth();
        console.log('‚úÖ Agente inicializado correctamente\n');

        // Test 2: Referencias locales
        console.log('2Ô∏è‚É£ Probando sistema de referencias...');
        const stats = agente.referencesProcessor.getKnowledgeStats();
        console.log(\`üìä Referencias cargadas: \${stats.totalReferences}\`);
        console.log(\`üìÇ Categor√≠as: \${Object.keys(stats.categories).join(', ')}\`);
        
        if (stats.totalReferences > 0) {
            console.log('‚úÖ Sistema de referencias funcionando\n');
        } else {
            console.log('‚ö†Ô∏è  No se encontraron referencias, verifica knowledge-base/\n');
        }

        // Test 3: B√∫squeda
        console.log('3Ô∏è‚É£ Probando b√∫squeda de conocimientos...');
        const searchResults = agente.referencesProcessor.searchKnowledge('design');
        console.log(\`üîç Resultados para "design": \${searchResults.length}\`);
        
        if (searchResults.length > 0) {
            console.log(\`üìù Ejemplo: \${searchResults[0].title} - \${searchResults[0].url}\`);
            console.log('‚úÖ B√∫squeda funcionando correctamente\n');
        }

        // Test 4: Consulta de patrones
        console.log('4Ô∏è‚É£ Probando consulta de patrones...');
        const patrones = await agente.consultarPatrones('saas', 'conversion');
        console.log(\`üé® Colores recomendados: \${patrones.colores_recomendados.length}\`);
        console.log(\`üß© Elementos UI: \${patrones.elementos_ui.length}\`);
        console.log(\`üìö Referencias externas: \${patrones.referencias_externas?.length || 0}\`);
        console.log('‚úÖ Patrones de dise√±o funcionando\n');

        console.log('üéâ ¬°Todas las pruebas pasaron correctamente!');
        console.log('üöÄ Rembranth est√° listo para usar');

    } catch (error) {
        console.error('‚ùå Error en las pruebas:', error);
        process.exit(1);
    }
}

async function testApiEndpoints() {
    console.log('\nüåê Probando endpoints de API...');
    
    // Simular inicio del servidor en puerto de prueba
    const agente = new AgenteRembranth();
    const testPort = 3001;
    
    console.log(\`üì° Iniciando servidor de prueba en puerto \${testPort}...\`);
    
    // Aqu√≠ podr√≠as agregar pruebas de endpoints si es necesario
    console.log('‚ÑπÔ∏è  Ejecuta npm start y visita http://localhost:3000 para pruebas completas');
}

// Ejecutar pruebas
if (require.main === module) {
    testBasicFunctionality()
        .then(() => testApiEndpoints())
        .catch(console.error);
}

module.exports = { testBasicFunctionality, testApiEndpoints };`;

        const testPath = path.join(this.projectRoot, 'test', 'test-agente.js');
        await fs.writeFile(testPath, testContent);
        console.log(`  ‚úì ${path.relative(this.projectRoot, testPath)}`);
    }

    async createDocumentation() {
        console.log('\nüìñ Creando documentaci√≥n...');
        
        const readmeContent = `# Rembranth - Agente de Dise√±o IA

> Asistente inteligente especializado en dise√±o UI/UX para SENASoft 2025

![Rembranth Logo](https://img.shields.io/badge/üé®-Rembranth-blueviolet?style=for-the-badge)
![Status](https://img.shields.io/badge/Status-Active-success?style=for-the-badge)
![Node](https://img.shields.io/badge/Node-%3E%3D18.0.0-green?style=for-the-badge)

## üöÄ Inicio R√°pido

### 1. Configurar API Key
\`\`\`bash
# Edita el archivo .env
GOOGLE_AI_API_KEY=tu_api_key_de_google_ai
\`\`\`

### 2. Instalar dependencias
\`\`\`bash
npm install
\`\`\`

### 3. Iniciar servidor
\`\`\`bash
npm start
# o para desarrollo:
npm run dev
\`\`\`

### 4. Abrir interfaz
Visita \`http://localhost:3000\`

## üìÅ Estructura del Proyecto

\`\`\`
agente-rembranth/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ main.js                 ‚Üê Servidor principal
‚îÇ   ‚îî‚îÄ‚îÄ local-references.js     ‚Üê Sistema de referencias locales
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html              ‚Üê Interfaz web
‚îú‚îÄ‚îÄ knowledge-base/             ‚Üê Base de conocimientos
‚îÇ   ‚îú‚îÄ‚îÄ design/                 ‚Üê Referencias de dise√±o
‚îÇ   ‚îú‚îÄ‚îÄ development/            ‚Üê Recursos de desarrollo
‚îÇ   ‚îú‚îÄ‚îÄ inspiration/            ‚Üê Sitios inspiradores
‚îÇ   ‚îú‚îÄ‚îÄ tools/                  ‚Üê Herramientas
‚îÇ   ‚îî‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îî‚îÄ‚îÄ test-agente.js          ‚Üê Pruebas b√°sicas
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ .env                        ‚Üê Configuraci√≥n
‚îî‚îÄ‚îÄ README.md
\`\`\`

## üìö Base de Conocimientos

Rembranth utiliza un sistema de referencias locales para enriquecer sus respuestas:

### Agregar Referencias

#### M√©todo 1: Archivos Markdown
\`\`\`markdown
## Mi Categor√≠a
- [Recurso √∫til](https://ejemplo.com) - Descripci√≥n
- [Otro recurso](https://otro.com)
\`\`\`

#### M√©todo 2: URLs con descripci√≥n
\`\`\`
https://ejemplo.com - Descripci√≥n del sitio
https://otro-ejemplo.com - Otro recurso √∫til
\`\`\`

#### M√©todo 3: URLs planas
\`\`\`
https://ejemplo.com
https://otro-ejemplo.com
\`\`\`

### Categor√≠as Disponibles
- \`design/\` - Referencias de dise√±o UI/UX
- \`development/\` - Recursos de desarrollo frontend
- \`inspiration/\` - Sitios web inspiradores
- \`tools/\` - Herramientas de dise√±o

## üîß API Endpoints

### Chat con Rembranth
\`\`\`http
POST /api/rembranth/chat
Content-Type: application/json

{
  "mensaje": "Analiza este dise√±o",
  "configuracion": {
    "industria": "saas",
    "publico_objetivo": "desarrolladores", 
    "objetivo": "conversion"
  }
}
\`\`\`

### Sistema de Conocimientos

#### Buscar referencias
\`\`\`http
GET /api/knowledge/search?q=dise√±o&category=design
\`\`\`

#### Estad√≠sticas
\`\`\`http
GET /api/knowledge/stats
\`\`\`

#### Agregar referencia
\`\`\`http
POST /api/knowledge/add
Content-Type: application/json

{
  "url": "https://ejemplo.com",
  "title": "T√≠tulo opcional",
  "category": "design"
}
\`\`\`

#### Recargar referencias
\`\`\`http
POST /api/knowledge/reload
\`\`\`

#### Exportar conocimientos
\`\`\`http
GET /api/knowledge/export?format=json
GET /api/knowledge/export?format=markdown
\`\`\`

### Estado del sistema
\`\`\`http
GET /api/health
\`\`\`

## üé® Caracter√≠sticas Principales

### ‚ú® Capacidades del Agente
- üìä An√°lisis autom√°tico de dise√±os
- üéØ Recomendaciones basadas en objetivos
- üíª Generaci√≥n de c√≥digo HTML/CSS
- üìà M√©tricas de conversi√≥n esperadas
- üîç B√∫squeda inteligente en base de conocimientos

### üñ•Ô∏è Interfaz Web
- üí¨ Chat interactivo con Rembranth
- üìÅ Carga de archivos (im√°genes, PDFs)
- üåê Gesti√≥n de URLs de conocimiento
- ‚öôÔ∏è Configuraci√≥n por industria y objetivo
- üìã Exportaci√≥n de conversaciones

### üß† Sistema de Referencias
- üìö Carga autom√°tica de archivos locales
- üîç B√∫squeda sem√°ntica inteligente
- üìä Estad√≠sticas de conocimiento
- üîÑ Actualizaci√≥n en tiempo real
- üíæ Exportaci√≥n de datos

## üõ†Ô∏è Desarrollo

### Ejecutar pruebas
\`\`\`bash
npm test
\`\`\`

### Desarrollo con recarga autom√°tica
\`\`\`bash
npm run dev
\`\`\`

### Estructura del c√≥digo
- \`src/main.js\` - Servidor Express con todas las rutas
- \`src/local-references.js\` - Procesador de referencias locales
- \`public/index.html\` - Interfaz web completa
- \`knowledge-base/\` - Base de conocimientos local

## üìã Requisitos

- Node.js >= 18.0.0
- API Key de Google Generative AI
- Navegador moderno para la interfaz

## üéØ Configuraci√≥n para SENASoft 2025

### Industrias soportadas
- E-commerce
- SaaS
- Landing Pages  
- Corporativo
- Educaci√≥n
- Salud

### Objetivos de optimizaci√≥n
- Aumentar conversiones
- Mejorar engagement
- Optimizar usabilidad
- Fortalecer branding
- Mejorar accesibilidad

## üìû Soporte

Para problemas o sugerencias:
1. Revisa los logs del servidor
2. Verifica tu API key en \`.env\`
3. Aseg√∫rate que \`knowledge-base/\` tenga contenido
4. Ejecuta \`npm test\` para diagn√≥sticos

## üöÄ ¬°Listo para SENASoft 2025!

Rembranth est√° optimizado para ayudarte en la competencia con:
- ‚ö° Respuestas r√°pidas y precisas
- üé® Conocimiento especializado en dise√±o
- üí° Sugerencias basadas en mejores pr√°cticas
- üîß C√≥digo listo para implementar

---

*"Dise√±ando el futuro con IA"* - Rembranth üé®‚ú®`;

        await fs.writeFile(path.join(this.projectRoot, 'README.md'), readmeContent);
        console.log('  ‚úì README.md actualizado');

        // Crear archivo de configuraci√≥n adicional
        const configContent = `# Configuraci√≥n Avanzada de Rembranth

## Variables de Entorno

\`\`\`env
# API Key de Google AI (REQUERIDA)
GOOGLE_AI_API_KEY=tu_api_key_aqui

# Puerto del servidor
PORT=3000

# Modo de desarrollo
NODE_ENV=development

# Ruta de la base de conocimientos
KNOWLEDGE_BASE_PATH=./knowledge-base

# Configuraci√≥n del agente
APP_NAME=Rembranth
APP_VERSION=1.1.0
\`\`\`

## Personalizaci√≥n

### Agregar nuevas industrias
Edita \`src/main.js\` en la secci√≥n \`patronesDiseno\`:

\`\`\`javascript
this.patronesDiseno = {
    mi_industria: {
        colores: ['#FF6B6B', '#4ECDC4'],
        elementos: ['custom-component', 'special-layout']
    }
};
\`\`\`

### Modificar patrones de URL
En \`src/local-references.js\`, ajusta \`urlPatterns\`:

\`\`\`javascript
this.urlPatterns = [
    /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,  // Markdown
    /https?:\\/\\/[^\\s<>"{}|\\\\\\^\\`[\\]]+/g,  // URLs planas
    // Agrega tus patrones personalizados
];
\`\`\`

## Integraci√≥n con Herramientas Externas

### Webhook de Figma
\`\`\`http
POST /api/webhook/figma
Content-Type: application/json

{
  "design_url": "https://figma.com/file/...",
  "event": "design_updated"
}
\`\`\`

### API de estado
\`\`\`javascript
const response = await fetch('/api/health');
const status = await response.json();
console.log(status.knowledge.totalReferences);
\`\`\`
`;

        await fs.writeFile(path.join(this.projectRoot, 'CONFIGURATION.md'), configContent);
        console.log('  ‚úì CONFIGURATION.md creado');
    }
}

// Ejecutar setup
if (require.main === module) {
    const setup = new RembranthSetup();
    setup.setup();
}

module.exports = RembranthSetup;